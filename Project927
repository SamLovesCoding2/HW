/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project927;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;


/**
 *
 * @author LUPEI20
 */
public class Project927 {

    /**
     * @param args the command line arguments
     */
    public static String firstWord = "";
    public static String secondWord = "";
    public static int difference = 0;

    public static HashSet<String> selectedWord;
    public static HashSet<String> currentGeneration;
    public static HashSet<String> nextGeneration;
    public static HashSet<String> traversed;
    
    public static void main(String[] args) throws Exception
    {
     
      selectedWord = new HashSet<>();
      currentGeneration = new HashSet<>();
      nextGeneration = new HashSet<>();
      traversed = new HashSet<>();
      try
      {
      
      Scanner sc = new Scanner(new File("dictionary words small.txt"));
      Scanner input = new Scanner(System.in);
      firstWord = input.next();
      secondWord = input.next();
      if(firstWord.length() != secondWord.length())
      {
            System.out.println("two words have to have same length");
            return;
      } 
      while(sc.hasNext())
      {
          String str = sc.next();
          if(str.length() == firstWord.length())
          {
              selectedWord.add(str);
          }     
      }
if(!selectedWord.contains(firstWord) || !selectedWord.contains(secondWord))
{
    System.out.println("the dictionary does not contain");
    return;
}
      currentGeneration.add(firstWord);
      int distance = 0;
    while(!currentGeneration.contains(secondWord))
    {
        if(currentGeneration.isEmpty())
        {
            System.out.println("NOOOO valid path");
            return;
        }
        for(String everyWordInCurrent:currentGeneration)
        {
            for(String wordInSource:selectedWord)
            {
                if(!traversed.contains(wordInSource))
                {
                    int count = 0;
                    for(int i = 0;i<everyWordInCurrent.length();i++)
                    {
                        if(wordInSource.charAt(i)!=everyWordInCurrent.charAt(i))
                        {
                            count++;
                        }
                    }
                    if(count == 1)
                    {
                        nextGeneration.add(wordInSource);
                        traversed.add(wordInSource);
                    }
                }
            }
        }
        currentGeneration.clear();
        currentGeneration.addAll(nextGeneration);
        nextGeneration.clear();
        distance++;
    }
          System.out.println(distance);
   }
      catch(Exception e)
      {
          System.out.println(e);
      }
    }
}

    
