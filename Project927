/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project927;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;


/**
 *
 * @author LUPEI20
 */
public class Project927 {

    /**
     * @param args the command line arguments
     */
    public static String firstWord = "";
    public static String secondWord = "";
    public static int difference = 0;
    public static HashMap<String, Integer> map;
    public static HashSet<String> selectedWord;
    public static Iterator<String> it;
    public static Iterator<String> itt;
    public static HashSet<String> distanceOne;
    public static HashSet<String> currentGeneration;
    public static HashSet<String> nextGeneration;
    public static HashSet<String> traversed;
    public static String str = "";
    
    public static void main(String[] args) throws Exception
    {
      map = new HashMap<>();
      selectedWord = new HashSet<>();
      distanceOne = new HashSet<>();
      currentGeneration = new HashSet<>();
      nextGeneration = new HashSet<>();
      traversed = new HashSet<>();
      try
      {
      Scanner sc = new Scanner(new File("test.txt"));
      Scanner input = new Scanner(System.in);
      firstWord = input.next();
      secondWord = input.next();
      
      while(sc.hasNext())
      {
          str = sc.next();
          //check if length of the two words
          if(firstWord.length() == secondWord.length())
             {
                 map.put(str, str.length());
             }
             else
             {
                 System.out.println("Two words need to have same distance");
                 break;
             }
         
      }
                
      for(Entry<String, Integer> word:map.entrySet())
          {
              //check if the two words are in the dictionary;
              if(map.containsKey(firstWord)&&map.containsKey(secondWord))
              {
                     String currentKey = word.getKey();
                     int currentValue = word.getValue();             
                     if(currentValue == firstWord.length()&&currentValue == secondWord.length())
                     { 
                            //words with same length
                            selectedWord.add(word.getKey());                        
                     }                   
              }else
              {
                  System.out.println("the dictionary does not contain the words, pls make everyword not capitalized");
                  break;
              }      
          }
          it = selectedWord.iterator();
          while(it.hasNext())
         {
            String strr = it.next();
            int count = 0;
            for(int i = 0;i<firstWord.length();i++)
            {
                if(strr.charAt(i)!=firstWord.charAt(i))
                {
                    count++;
                }
            }
            if(count == 1)
            {
                distanceOne.add(strr);
            }
         }     
          currentGeneration.add(firstWord);
          nextGeneration = distanceOne;
          System.out.println("current: " + currentGeneration);//corrent
          System.out.println("next" + nextGeneration);//corrent
          int distanceNum = 1;
          if(currentGeneration.contains(secondWord))
          {
              System.out.println("the distance: 1");
          }else
          {
            while(!currentGeneration.contains(secondWord))
            { System.out.println("no");
                traversed.addAll(currentGeneration);
                currentGeneration.clear();
                currentGeneration = nextGeneration;
                nextGeneration.clear();
                itt = currentGeneration.iterator();
                while(itt.hasNext())
                   {
                       String wordInCurrent = itt.next();
                   while(it.hasNext())
                       {
                           String wordInSet = it.next();
                           int count = 0;
                               for(int i = 0;i<wordInSet.length();i++)
                                   {
                                       if(wordInCurrent.charAt(i)!=wordInSet.charAt(i))
                                           {
                                               count++;
                                           }
                                   }
                               if(count == 1)
                               {
                                   nextGeneration.add(wordInSet);
                               }
                       }
                   }
                    distanceNum++;
            }   
         System.out.println(distanceNum);
        }   
      }
      catch(Exception e)
      {
          System.out.println(e);
      }
    }
}

    
